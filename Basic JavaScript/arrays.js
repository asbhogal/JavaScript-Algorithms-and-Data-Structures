// ARRAYS ALLOW YOU TO STORE SEVERAL PIECES OF DATA IN ONE PLACE
// ARRAYS ARE ALWAYS ASSIGNED VALUES WITHIN [] UPON DECLARATION
// EVERY ELEMENT IN AN ARRAY IS SEPARATED BY A COMMA
// ELEMENTS OF DIFFERENT DATA TYPES CAN BE STORED WITHIN AN ARRAY

var ourArray = ["John", 23];

// NESTED ARRAYS

// NESTED ARRAYS, ALSO KNOWN AS MULTI-DIMENSIONAL ARRAYS, ARE THOSE WHERE ANOTHER ARRAY EXISTS WITHIN THEM. ONE ELEMENT IN THE ARRAY COULD THEREFORE BE ANOTHER ARRAY OF MANY ELEMENTS WITHIN THEM ITSELF, AS SEEN BELOW:

var myArray = [
  ["the universe", 42],
  ["everything", 101010],
];

// IN THE ABOVE, TWO ARRAYS ARE WITHIN THIS MULTI-DIMENSIONAL ARRAY, WITH TWO VALUES WITHIN IT THEMSELVES ie. TWO ARRAYS WITHIN ONE ARRAY, EACH WITH TWO ELEMENTS WITHIN THEM

// ACCESSING ARRAY DATA WITH INDEXES

// PREVIOUSLY, WE LEARNED HOW TO USE BRACKET NOTATION TO FIND A SPECIFIC INDEX IN A STRING. THE SAME THING CAN BE PERFORMED WITH ARRAYS:

var newArray = [50, 60, 70]; // THESE VALUES ARE AT POSITIONS 0, 1 AND 2, RESPECTIVELY
// TO THEREFORE FIND THE FIRST ELEMENT IN THE ARRAY:
var newData = newArray[0]; // IS 50
console.log(newData); // OUTPUTS 50

// MODIFYING ARRAY DATA WITH INDEXES

// MODIFYING ARRAY DATA WAS EARLIER SEEN WITH STRINGS USING BRACKET NOTATION, WHICH WAS UNSUCCESSFUL - WITH ARRAYS HOWEVER, THIS IS POSSIBLE.

// TAKING AN ARRAY:

var firstArray = [18, 64, 99];

// AND REPLACING THE VALUE IN INDEX POSITION 1 (64) WITH 45:

firstArray[1] = 45; // ie. TAKE THE VALUE OF INDEX ONE OF THE ARRAY firstArray AND ASSIGN IT THE VALUE OF 45

// THIS UPDATES THE ARRAY WITH THE NUMBER 64 BEING INSTEAD NOW SET TO 45:

// firstArray NOW = [18, 45, 99]
