/*     Often, you will set data into a variable. A variable allows computers to store and manipulate data in a dynamic fashion, and is basically a label to point to the data. A variable is like a box, and it can be filled with anything/the data you want*/

// A VARIABLE CAN BE SET TO ANY OF THE DATA TYPES SEEN PREVIOUSLY

// THERE ARE THREE WAYS TO DECLARE A VARIABLE IN JS:

    // 1. var

    // THIS CAN BE USED ACROSS THE WHOLE PROGRAM AND CHANGED AT ANY POINT

    var myName = "Aman"; //DECLARING THE VARIABLE myName AND ASSIGNING IT A STRING TYPE (WHICH IS COMMON) VALUE OF Aman

    myname = 8;          // THE CONTENTS AND TYPE OF VARIABLE myName HERE CAN THEN ALSO BE CHANGED LATER

    // 2. let

    // THIS WILL ONLY BE USED WITHIN THE SCOPE OF WHERE IT WAS DECLARED
    
    let ourName = "freeCodeCamp";

    // 3. const

    // VARIABLE WHICH SHOULD NEVER AND CAN NEVER CHANGE ONCE SET. ATTEMPTING TO CHANGE THIS WILL RETURN AN ERROR

    const pi = 3.14;

    // THERE IS A DIFFERENCE BETWEEN ASSIGNING A VARIABLE AND DECLARING A VARIABLE:

        var a;      // THIS JUST DECLARES A VARIABLE, CALLED a
        var b = 2;  // THIS DECLARES A VARIABLE CALLED b, THEN ASSIGNS IT A DATA VALUE OF NUMBER. THE CONTENTS OF WHICH IS 2.

        console.log(a);  // THE CONSOLE LOG CAN BE USED TO CHECK WHAT THE VALUES ARE IN VARIABLES AT DIFFERENT POINTS IN THE PROGRAM. HERE, IT WILL RETURN null/nothing... 

        // THE = IS THE ASSIGNMENT OPERATOR, SO LINE 30 MEANS THAT VARIABLE b IS BEING DECLARED AND ASSIGNED THE VALUE OF 2

        a = 7;      // SINCE a WAS ALREADY DECLARED PREVIOUSLY, HERE IT CAN JUST BE ASSIGNED A VALUE WITHOUT NEEDING TO DECLARE IT AGAIN

        b = a;      // HERE, THE CONTENTS OF a HAS BEEN ASSIGNED TO b, REPLACING THE VALUE 2 WITH THE VALUE 7

// (NB. IT IS GOOD PRACTICE TO END EACH LINE WITH A ;)

        console.log(a);     // ...HERE, THE LOG WILL RETURN THE VALUE 7

// INITIALISING A VARIABLE THE SAME TIME IT IS DECLARED

    var a = 9;

    // VARIABLES WHICH HAVEN'T BEEN INITIALISED WHEN THEY WERE DECLARED HAVE UNDEFINED VALUES ie. NOT SET TO ANYTHING

    var a;
    var b;
    var c;

    // INITIALISING VARIABLES BY ASSIGNING VALUES

    var a = 5;                  // NUMBER
    var b = 10;                 // NUMBER
    var c = "I am a";           // STRING

    // UPDATING THE VALUES OF VARIABLES VIA...

    a = a + 1;                  // INCREMENTING
    b = b + 1;                  // INCREMENTING
    c = c + " String.";         // APPENDING A STRING VALUE

    // N.B. VARIABLE NAMES (AND FUNCTION NAMES) ARE CASE SENSITIVE
    // THEREFORE, THE DECLARED VARIABLES BELOW...

    var StUdLyCapVar;
    var properCamelCase;
    var TitleCaseOver;

    //...WILL NOT HAVE THESE VALUES ASSIGNED TO THEM:

    STUDLYCAPVAR = 10;
    PRoperCAmelCAse = "A String";
    tITLEcASEoVER = 9000;

    // THESE VARIABLES ABOVE WILL ALSO NOT BE DEFINED, AS var DOES NOT PRECEDE THEM. AN ERROR WILL THEREFORE BE RETURNED.

    // CAMELCASE IS CONVENTIONAL AND WIDELY ACCEPTED:

    var studlyCapVar = 10;
    var properCamelCase = "A String";
    var titleCaseOver = 9000;

    // THIS USES CORRECT CAPITALISATION, DECLARES THE VARIABLES AND ASSIGNS THEM AT THE SAME TIME

    // THIS ESSENTIALLY MEANS THE VARIABLES WILL BEHAVE HOW WE INTEND THEM TO, USING CORRECT PRACTICE AND CONVENTION


